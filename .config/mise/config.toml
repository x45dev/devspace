#
# FILE: .mise.toml
#
# DESCRIPTION:
# This is the central configuration file for the Mise tool manager. It defines the project's
# toolset and declaratively manages environment variables, including secrets.
#
# Version: 2025-09-11 22:45:00 AEST

# --- Env Configuration ---
#
# WHY: This section is the core of the declarative environment setup. Mise automatically
#   activates this environment when you `cd` into the project directory.
# The `_.file` directive tells Mise to load variables from these files, in order.
# Critically, Mise has built-in SOPS support; it will recognize `.env.sops.yaml`
#   and automatically decrypt it in memory before loading the variables. This replaces
#   the need for any custom profile scripts.
# Use `tools` to add to $PATH *after* tools have defined env vars / sourced scripts;
#   eg. `_.path = { path = ["{{env.GEM_HOME}}/bin"], tools = true }`
#   eg. `_.source = { path = "my/env.sh", tools = true }
#

[env]
_.file = [ 
    "{{config_root}}/.config/env/.env", 
    { path = "{{config_root}}/.config/env/.env.sops.yaml", redact = true }
]

# Optionally add additional directories to $PATH
_.path = [ 
    "{{config_root}}/scripts"
]

# Optionally configure Python venv management
# _.python.venv = { path = ".venv", create = false, uv_create_args = ['--seed'] }

# --- Mise Configuration ---
[settings]
experimental = true
# sops.disable_git_check = true  # Use if your .git directory is outside the project root
# global_config_file = "config.toml"
# global_config_root = "~/.config/mise"
sops.rops = false

# --- Tasks ---
# NB: A bug results in Mise using `{{config_root}}=$HOME`, 
#     therefore use relative links from $HOME to specify tasks file locations.
#     Setting `global_config_root` seems to have no effect.
[task_config]
includes = [
    ".config/mise/tasks/tasks.toml",
    ".config/mise/tasks"
]

# --- Tools ---
#
# WHY: Defining tool versions here ensures every developer uses the exact same dependencies,
# eliminating "it works on my machine" problems. `mise install` will automatically

# provision these versions. Using "latest" is suitable for this template, but for
# production projects, pinning to specific versions (e.g., python = "3.13.0") is recommended.
#
[tools]
age = "latest"
hadolint = "latest"
jq = "latest"
lefthook = "latest"
node = "latest"
python = "3.13"
shellcheck = "latest"
shfmt = "latest"
sops = "latest"
uv = "latest"
yq = "latest"
