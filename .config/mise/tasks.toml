# FILE: .config/mise/tasks.toml
#
# DESCRIPTION:
# This file defines custom project tasks that can be run with `mise run <task_name>`.
# It is the single source of truth for all linting and validation commands.
#
# Version: 2025-09-15 16:30:00 AEST -> Updated 2025-09-15 16:50:00 AEST
#

# --- TOOLS ---
[x-codex]
alias = "codex"
description = "Tool: Execute the OpenAI Codex CLI via NPX"
raw = true
run = "npx @openai/codex"

[x-gemini]
alias = "gemini"
description = "Tool: Execute the Google Gemini CLI via NPX"
raw = true
run = "npx https://github.com/google-gemini/gemini-cli --checkpointing"

[x-crush]
alias = "crush"
description = "Tool: Execute the Charmbracelet Crush CLI via NPX"
raw = true
run = "npx @charmland/crush $@"

# --- LINTING TASKS ---

[lint-shfmt]
description = "Linter: Check shell script formatting with shfmt."
run = "shfmt -d -i 2 -ci -sr ."
sources = ["**/*.sh"]

[lint-shellcheck]
description = "Linter: Statically analyze shell scripts with shellcheck."
run = "shellcheck $(find . -type f -name \"*.sh\")"
sources = ["**/*.sh"]

[lint-hadolint]
description = "Linter: Check Dockerfile for best practices with hadolint."
run = "hadolint .devcontainer/Dockerfile"
sources = [".devcontainer/Dockerfile"]

[lint]
description = "Run all project linters in parallel."
alias = "l"
depends = ["lint-shfmt", "lint-shellcheck", "lint-hadolint"]


# --- TESTING & UTILITY TASKS ---
[test]
description = "Run automated test suite (BATS)."
run = "bats .devcontainer/tests/"
alias = "t"

[link-check]
description = "Check markdown links across the repo (optional)"
raw = true
run = """
#!/usr/bin/env -S bash -euo pipefail
mapfile -t files < <(git ls-files '*.md')
fail=0
for f in "${files[@]}"; do
  npx -y markdown-link-check -q "$f" || fail=1
done
exit $fail
"""

[sops-test-config]
description = "SOPS/AGE: Test configuration."
env = { SOPS_AGE_KEY_FILE="{{env.MISE_SOPS_AGE_KEY_FILE}}" }
run = """
#!/usr/bin/env -S bash -euo pipefail
export SOPS_AGE_RECIPIENTS=$(age-keygen -y \"$SOPS_AGE_KEY_FILE\")
echo '{"test":"json-input"}' |\
  sops --encrypt --input-type=json --output-type=json /dev/stdin |\
  sops --decrypt --input-type=json --output-type=yaml /dev/stdin |\
  yq '.test = \"yaml-output (success!)\"'
"""

[python-test-uv]
description = "Python/UV: test script with PEP 723 metadata."
run = """
#!/usr/bin/env -S uv run --script --python=313
# /// script
# dependencies = ["cowsay", "emoji", "loguru"]
# requires-python = ">=3.13,<3.14"
# ///
import cowsay, emoji, loguru, sys
from loguru import logger
logger.info(f"Venv path:  \t {sys.prefix}")
logger.info(f"Python info:\t ")
logger.info(cowsay.fox(emoji.emojize(f"Python {':snake:'*3}")))
"""

# --- BOOTSTRAP TASKS ---

[setup-project]
description = "Run the initial interactive setup for key generation. Should be run on the host."
file = ".devcontainer/scripts/bootstrap.sh"
